// SPDX-License-Identifier: MIT
pragma solidity =0.8.18;

import "./lib/ownable.sol";
import "./lib/safemath.sol";
import "@chainlink/contracts/src/v0.6/VRFConsumerBase.sol";

contract ZombieFactory is Ownable {
  using SafeMath for uint256;
  using SafeMath for uint32;
  using SafeMath for uint16;

  event NewZombie(uint zombieId, string name, uint dna);

  uint dnaDigits = 16;
  uint dnaModulus = 10 ** dnaDigits;
  uint cooldownTime = 1 days;
  bytes32 public keyHash;
  uint256 public fee;
  uint256 public randomResult;

  struct Zombie {
    string name;
    uint dna;
    uint32 level;
    uint32 readyTime;
    uint16 winCount;
    uint16 lossCount;
  }

  Zombie[] public zombies;

  constructor()
    VRFConsumerBase(
      0x6168499c0cFfCaCD319c818142124B7A15E857ab, // VRF Coordinator
      0x01BE23585060835E02B77ef475b0Cc51aA1e0709 // LINK Token
    )
  {
    keyHash = 0x2ed0feb3e7fd2022120aa84fab1945545a9f2ffc9076fd6156fa96eaff4c1311;
    fee = 100000000000000000;
  }

  function getRandomNumber() public returns (bytes32 requestId) {
    return requestRandomness(keyHash, fee);
  }

  // only the VRF Coordinator contract calls this function.
  function fulfillRandomness(
    bytes32 requestId,
    uint256 randomness
  ) internal override {
    randomResult = randomness;
  }

  mapping(uint => address) public zombieToOwner;
  mapping(address => uint) ownerZombieCount;

  function _createZombie(string memory _name, uint _dna) internal {
    uint32 readytime = uint32(block.timestamp + cooldownTime);
    Zombie memory zombie = Zombie(_name, _dna, 1, readytime, 0, 0);
    zombies.push(zombie);

    uint id = zombies.length - 1;
    zombieToOwner[id] = msg.sender;
    ownerZombieCount[msg.sender] = ownerZombieCount[msg.sender].add(1);

    emit NewZombie(id, _name, _dna);
  }

  function _generateRandomDna(string memory _str) private view returns (uint) {
    uint rand = uint(keccak256(abi.encodePacked(_str)));
    return rand % dnaModulus;
  }

  function createRandomZombie(string memory _name) public {
    require(ownerZombieCount[msg.sender] == 0);
    uint randDna = _generateRandomDna(_name);
    randDna = randDna - (randDna % 100);
    _createZombie(_name, randDna);
  }
}
